{"version":3,"sources":["Components/Cumulus/Cumulus.js","Components/Ciel/Ciel.js","App.js","serviceWorker.js","index.js"],"names":["chuteMax","window","innerHeight","deriveMax","innerWidth","Nuage","_ref","nuageName","react_default","a","createElement","className","Cumulus","_ref2","myElement","useEffect","chute","Math","floor","random","derive","TweenLite","to","x","y","ref","div","Cumulus_Nuage","Ciel","_React$useState","React","useState","clouds","_React$useState2","Object","slicedToArray","state","setState","onSubmit","event","preventDefault","rime","split","length","l","concat","toConsumableArray","addCloud","alert","TextField","onChange","objectSpread","target","value","map","index","Components_Cumulus_Cumulus","key","App","Components_Ciel_Ciel","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAKMA,SAAWC,OAAOC,YADA,IAElBC,EAAYF,OAAOG,WAEnBC,EAAQ,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UACf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,MAwBlBK,EAlBC,SAAAC,GAAmB,IAAhBN,EAAgBM,EAAhBN,UAEbO,EAAY,KAShB,OANAC,oBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWnB,GACnCoB,EAASH,KAAKC,MAAMD,KAAKE,SAAWhB,GAC1CkB,IAAUC,GAAGR,EAAW,EAAG,CAAES,EAAGH,EAAQI,EAAGR,KAC1C,CAACT,IAGFC,EAAAC,EAAAC,cAAA,OAAKe,IAAK,SAAAC,GAAG,OAAKZ,EAAYY,GAAMf,UAAU,WAC5CH,EAAAC,EAAAC,cAACiB,EAAD,CAAOpB,UAAWA,cCcTqB,SAtCF,WAAM,IAAAC,EACSC,IAAMC,SAAS,CACvCC,OAAQ,GACRzB,UAAW,KAHI0B,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GACVO,EADUH,EAAA,GACHI,EADGJ,EAAA,GAqBjB,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAM4B,SAba,SAAAC,GACrBA,EAAMC,iBACN,IAAMC,EAAOL,EAAM7B,UAAUmC,MAAM,OAC/BD,EAAKE,OAAS,GAA+B,KAA1BF,EAAKA,EAAKE,OAAS,GAR3B,SAAApC,GACf,IAAMqC,EAAC,GAAAC,OAAAX,OAAAY,EAAA,EAAAZ,CAAOE,EAAMJ,QAAb,CAAqBzB,IAC5B8B,EAAS,CAAE9B,UAAW,GAAIyB,OAAQY,IAOhCG,CAASX,EAAM7B,WAGfyC,MAAM,gCAM0BrC,UAAU,aACxCH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACEC,SAAU,SAAAX,GACRF,EAASH,OAAAiB,EAAA,EAAAjB,CAAA,GAAKE,EAAN,CAAa7B,UAAWgC,EAAMa,OAAOC,UAE/CA,MAAOjB,EAAM7B,aAGhB6B,EAAMJ,OAAOsB,IAAI,SAAC/C,EAAWgD,GAC5B,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,CAASC,IAAKlD,EAAWA,UAAWA,SC1BpCmD,MAVf,WACE,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACiD,EAAD,SCIYC,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2fc82a96.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { TweenLite } from 'gsap/TweenMax';\nimport './style.css';\n\nconst cloudBaseHeight = 50;\nconst chuteMax = window.innerHeight - cloudBaseHeight;\nconst deriveMax = window.innerWidth;\n\nconst Nuage = ({ nuageName }) => {\n  return (\n    <div>\n      <div className=\"nuage\" />\n      <div className=\"surrimage\">\n        <div className=\"rimage\">{nuageName}</div>\n      </div>\n    </div>\n  );\n};\n\nconst Cumulus = ({ nuageName }) => {\n  // reference to the DOM node\n  var myElement = null;\n  // reference to the animation\n\n  useEffect(() => {\n    const chute = Math.floor(Math.random() * chuteMax);\n    const derive = Math.floor(Math.random() * deriveMax);\n    TweenLite.to(myElement, 3, { x: derive, y: chute });\n  }, [nuageName]);\n\n  return (\n    <div ref={div => (myElement = div)} className=\"cumulus\">\n      <Nuage nuageName={nuageName} />\n    </div>\n  );\n};\n\nexport default Cumulus;\n","import React from 'react';\nimport Cumulus from '../Cumulus/Cumulus';\nimport Textfield from '@material-ui/core/Textfield';\nimport './style.css';\n\nconst cloudBaseHeight = 50;\nconst cloudHeight = 85;\n\nconst Ciel = () => {\n  const [state, setState] = React.useState({\n    clouds: [],\n    nuageName: '',\n  });\n  const addCloud = nuageName => {\n    const l = [...state.clouds, nuageName];\n    setState({ nuageName: '', clouds: l });\n  };\n\n  const dessineLeNuage = event => {\n    event.preventDefault();\n    const rime = state.nuageName.split('age');\n    if (rime.length > 1 && rime[rime.length - 1] === '') {\n      addCloud(state.nuageName);\n    } else {\n      // eslint-disable-next-line no-alert\n      alert('ce mot ne rime pas avec age');\n    }\n  };\n\n  return (\n    <div className=\"ciel\">\n      <form onSubmit={dessineLeNuage} className=\"dessinage\">\n        <Textfield\n          onChange={event => {\n            setState({ ...state, nuageName: event.target.value });\n          }}\n          value={state.nuageName}\n        />\n      </form>\n      {state.clouds.map((nuageName, index) => {\n        return <Cumulus key={nuageName} nuageName={nuageName} />;\n      })}\n    </div>\n  );\n};\n\nexport default Ciel;\n","import React from 'react';\nimport './App.css';\nimport { Ciel } from './Components/Ciel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Ciel />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}